.[, c(2,3)] %>%
data.table::setDT() %>%
data.table::setnames(
old = names(.),
new = c("code","description")
) %>%
.[!is.na(code)]
# 2007
naics_2007 = CODE_TABLES$`2007` %>%
readxl::read_xls() %>%
.[, c(2,3)] %>%
data.table::setDT() %>%
data.table::setnames(
old = names(.),
new = c("code","description")
) %>%
.[!is.na(code)]
# 2002
naics_2002 = CODE_TABLES$`2002` %>%
readLines() %>%
.[5:length(.)] %>%
data.table::data.table() %>%
setnames(
old = names(.),
new = "line"
) %>%
.[, code := stringr::str_extract(
string = line,
pattern = "^[0-9]{2,6}"
)] %>%
.[, description := stringr::str_replace_all(
string = line,
pattern = "^[0-9]{2,6}\\s{1,}",
replacement = ""
)] %>%
.[, .(code, description)] %>%
.[!is.na(code)]
# Equivalence tables ===========================================================
# 2017-2022
e2017_2022 = EQUIVALENCE_TABLES$`2017_2022` %>%
readxl::read_xlsx() %>%
.[3:nrow(.), c(1,3)] %>%
data.table::setDT() %>%
setnames(
old = names(.),
new = c("code_2017","code_2022")
)
# 2012-2017
e2012_2017 = EQUIVALENCE_TABLES$`2012_2017` %>%
readxl::read_xlsx() %>%
.[3:nrow(.), c(1,3)] %>%
data.table::setDT() %>%
setnames(
old = names(.),
new = c("code_2012","code_2017")
)
# 2007-2012
e2007_2012 = EQUIVALENCE_TABLES$`2007_2012` %>%
readxl::read_xls() %>%
.[3:nrow(.), c(1,3)] %>%
data.table::setDT() %>%
setnames(
old = names(.),
new = c("code_2007","code_2012")
)
# 2002-2007
e2002_2007 = EQUIVALENCE_TABLES$`2002_2007` %>%
readxl::read_xls() %>%
.[3:nrow(.), c(1,3)] %>%
data.table::setDT() %>%
setnames(
old = names(.),
new = c("code_2002","code_2007")
)
# 1997-2002
e1997_2002 = EQUIVALENCE_TABLES$`1997_2002` %>%
readxl::read_xls(
sheet = "Concordance 23 US NoD"
) %>%
.[, c(1,3)] %>%
data.table::setDT() %>%
setnames(
old = names(.),
new = c("code_1997","code_2002")
) %>%
.[!is.na(code_1997)] %>%
.[, lapply(.SD, as.character)]
# Merge up to build complete table
equiv = e1997_2002 %>%
data.table::merge.data.table(
x = .,
y = e2002_2007,
by = "code_2002",
all.x = TRUE,
all.y = TRUE
) %>%
data.table::merge.data.table(
x = .,
y = e2007_2012,
by = "code_2007",
all.x = TRUE,
all.y = TRUE
) %>%
data.table::merge.data.table(
x = .,
y = e2012_2017,
by = "code_2012",
all.x = TRUE,
all.y = TRUE
) %>%
data.table::merge.data.table(
x = .,
y = e2017_2022,
by = "code_2017",
all.x = TRUE,
all.y = TRUE
) %>%
.[, c(paste0("code_", seq(1997,2022,by=5))), with=FALSE] %>%
data.table::setkey(NULL)
usethis::use_data_raw()
usethis::use_data(naics_2022)
usethis::use_data(naics_2017)
usethis::use_data(naics_2012)
usethis::use_data(naics_2007)
usethis::use_data(naics_2002)
usethis::use_data(equiv)
naics_2022
naics_2002
equiv
naics_2007
naics_2012
naics_2017
naics_2022
equiv
# Merge up to build complete table
naics_xwalk = e1997_2002 %>%
data.table::merge.data.table(
x = .,
y = e2002_2007,
by = "code_2002",
all.x = TRUE,
all.y = TRUE
) %>%
data.table::merge.data.table(
x = .,
y = e2007_2012,
by = "code_2007",
all.x = TRUE,
all.y = TRUE
) %>%
data.table::merge.data.table(
x = .,
y = e2012_2017,
by = "code_2012",
all.x = TRUE,
all.y = TRUE
) %>%
data.table::merge.data.table(
x = .,
y = e2017_2022,
by = "code_2017",
all.x = TRUE,
all.y = TRUE
) %>%
.[, c(paste0("code_", seq(1997,2022,by=5))), with=FALSE] %>%
data.table::setkey(NULL)
usethis::use_data(naics_xwalk)
library(devtools)
load_all()
code = "1"
stringr::str_detect(code, "[0-9]{2,6}")
stringr::str_detect("1234567", "[0-9]{2,6}")
stringr::str_detect("123456", "[0-9]{2,6}")
stringr::str_detect("12345678", "[0-9]{2,6}")
stringr::str_detect("12345678", "^[0-9]{2,6}$")
stringr::str_detect("1234567", "^[0-9]{2,6}$")
stringr::str_detect("123456", "^[0-9]{2,6}$")
Sys.date()
Sys.Date()
# Round off years for matching
releases = seq(1997, cy, by=5)
code = "11"
# Check format of code: must be 2-6 digit numeric
if(is.numeric(code)){
code = as.character(code)
}
if(!stringr::str_detect(code, "^[0-9]{2,6}$")){
stop(
"`code` must be a 2-6 digit number"
)
}
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y")
if(from_year < 1997 | from_year > cy){
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
from_year = 2003
to_year = 2024
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
# Round off years for matching
releases = seq(1997, cy, by=5)
releases
# Round off years for matching
releases = seq(1997, cy, by=5)
fyr = releases[max(which(from_year >= releases))]
tyr = releases[max(which(to_year >= releases))]
fyr
tyr
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0(
"code_",
.
)
library(magrittr)
library(stringr)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0(
"code_",
.
)
xwalk_cols
naics_xwalk %>%
.[, xwalk_cols, with=FALSE] %>%
.[stringr::str_detect(get(xwalk_cols[1]), paste0("^",code))]
naics_xwalk
naics
naics_2022
library(data.table)
library(magrittr)
library(stringr)
naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE] %>%
.[stringr::str_detect(get(xwalk_cols[1]), paste0("^",code))]
# Extract appropriate columns
nd = nchar(codes)
codes = c("11","33")
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
n = 2
codes_n = codes[nd == n]
# Extract appropriate columns
nd = nchar(codes)
codes_n = codes[nd == n]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=2)]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=2)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
unique()
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=2)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols, with=FALSE]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=2)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
convert = function(codes, from_year, to_year){
# Check format of code: must be 2-6 digit numeric
if(is.numeric(codes)){
codes = as.character(codes)
}
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2,6}$"))){
stop(
"all `codes` must be 2-6 digit numbers"
)
}
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
# Round off years for conversion
releases = seq(1997, cy, by=5)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nd = nchar(codes)
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=2)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
rbindlist()
return(converted)
}
naics_xwalk
codes = c("926140","32")
# Check format of code: must be 2-6 digit numeric
if(is.numeric(codes)){
codes = as.character(codes)
}
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2,6}$"))){
stop(
"all `codes` must be 2-6 digit numbers"
)
}
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
# Round off years for conversion
releases = seq(1997, cy, by=5)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nd = nchar(codes)
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=2)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
rbindlist()
converted
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
rbindlist()
converted
converted[, xwalk_cols[1]]
# Warn about any missing codes
missing_codes = codes[!codes %in% converted[, xwalk_cols[1], with=FALSE]]
missing_codes
converted[, xwalk_cols[1], with=FALSE]
converted[[xwalk_cols[1]]
]
# Warn about any missing codes
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
missing_codes
xwalk$code_2002
code_2022
xwalk
devtools::document()
?naics_xwalk
?convert
#' manifests. This is especially useful when one "code_{from}" matches to
#' multiple entries in "code_{to}".
#'
#' @export
#'
#' @examples
#' # Convert 3 codes from 2002 to 2022
#' convert(c("32","451","926140"), 2002, 2022)
#' # Because of release schedule, the following is equivalent to the above
#' convert(c("32","451","926140"), 2005, 2024)
convert = function(codes, from_year, to_year){
# Check format of code: must be 2-6 digit numeric
if(is.numeric(codes)){
codes = as.character(codes)
}
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2,6}$"))){
stop(
"all `codes` must be 2-6 digit numbers"
)
}
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
# Round off years for conversion. Throw an error if they map to the same year
releases = seq(1997, cy, by=5)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
if(all.equal(xwalk_cols)){
stop(
paste0(
from_year, " and ", to_year, "correspond to the same NAICS release"
)
)
}
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nd = nchar(codes)
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
rbindlist()
# Warn about any missing codes before returning
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
if(length(missing_codes) > 0){
warn(
paste0(
"The following codes are not present in the NAICS ", xwalk_cols[1],
"release:", paste(missing_codes, collapse=", ")
)
)
}
return(converted)
}
devtools::document()
rm(list = c("convert"))
devtools::document()
?convert
check()
check()
install.packages("pak")
pak::pkg_deps_tree("data.table")
usethis::use_package("data.table")
usethis::use_package("magrittr")
usethis::use_package("stringr")
check()
data.table::.SD
check(0
check()
converted
converted %>% .[, data.table::.N, by=.(code_2022)]
converted %>% .[, data.table::`.N`, by=.(code_2022)]
converted %>% .[, .N, by=.(code_2022)]
check()
all.equal(c("1","1"))
check()
usethis::use_import_from("magrittr", "%>%")
usethis::use_import_from("magrittr", "%>%")
usethis::use_import_from("data.table", ".N")
usethis::use_import_from("data.table", ".SD")
usethis::use_import_from("data.table", ".")
check()
