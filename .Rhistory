}
# Round off years for conversion. Throw an error if they map to the same year
releases = seq(1997, cy, by=5)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
if(xwalk_cols[1] == xwalk_cols[2]){
stop(
paste0(
from_year, " and ", to_year, "correspond to the same NAICS release"
)
)
}
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nd = nchar(codes)
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
data.table::rbindlist()
# Warn about any missing codes before returning
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
if(length(missing_codes) > 0){
warning(
paste0(
"The following codes are not present in the NAICS ", xwalk_cols[1],
"release:", paste(missing_codes, collapse=", ")
)
)
}
return(converted)
}
devtools::document()
#' manifests. This is especially useful when one "code_\{from\}" matches to
#' multiple entries in "code_\{to\}".
#'
#' @export
#'
#' @examples
#' # Convert 3 codes from 2002 to 2022
#' convert(c("32","451","926140"), 2002, 2022)
#' # Because of release schedule, the following is equivalent to the above
#' convert(c("32","451","926140"), 2005, 2024)
convert_naics = function(codes, from_year, to_year){
# Check format of code: must be 2-6 digit numeric
if(is.numeric(codes)){
codes = as.character(codes)
}
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2,6}$"))){
stop(
"all `codes` must be 2-6 digit numbers"
)
}
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
# Round off years for conversion. Throw an error if they map to the same year
releases = seq(1997, cy, by=5)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
if(xwalk_cols[1] == xwalk_cols[2]){
stop(
paste0(
from_year, " and ", to_year, "correspond to the same NAICS release"
)
)
}
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nd = nchar(codes)
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
data.table::rbindlist()
# Warn about any missing codes before returning
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
if(length(missing_codes) > 0){
warning(
paste0(
"The following codes are not present in the NAICS ", xwalk_cols[1],
"release:", paste(missing_codes, collapse=", ")
)
)
}
return(converted)
}
devtools::document()
load_all()
usethis::load_all()
devtools::load_all()
rm(list = c("convert_naics"))
devtools::load_all()
#' manifests. This is especially useful when one "code_\{from\}" matches to
#' multiple entries in "code_\{to\}".
#'
#' @export
#'
#' @examples
#' # Convert 3 codes from 2002 to 2022
#' convert(c("32","451","926140"), 2002, 2022)
#' # Because of release schedule, the following is equivalent to the above
#' convert(c("32","451","926140"), 2005, 2024)
convert_naics = function(codes, from_year, to_year){
# Check format of code: must be 2-6 digit numeric
if(is.numeric(codes)){
codes = as.character(codes)
}
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2,6}$"))){
stop(
"all `codes` must be 2-6 digit numbers"
)
}
# Check the from/to years: must be >1997, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 1997 | from_year > cy){
stop(
"`from_year` must be between 1997 (release of NAICS) and the current year"
)
}
if(to_year < 1997 | from_year > cy){
stop(
"`to_year` must be between 1997 (release of NAICS) and the current year"
)
}
# Round off years for conversion. Throw an error if they map to the same year
releases = seq(1997, cy, by=5)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
if(xwalk_cols[1] == xwalk_cols[2]){
stop(
paste0(
from_year, " and ", to_year, "correspond to the same NAICS release"
)
)
}
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nd = nchar(codes)
xwalk = naics_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
data.table::rbindlist()
# Warn about any missing codes before returning
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
if(length(missing_codes) > 0){
warning(
paste0(
"The following codes are not present in the NAICS ", xwalk_cols[1],
"release:", paste(missing_codes, collapse=", ")
)
)
}
return(converted)
}
devtools::document()
rm(list = c("convert_naics"))
devtools::document()
devtools::document()
soc_xwalk
soc_xwalk[is.duplicated(code_2018)]
soc_xwalk[duplicated(code_2018)]
soc_xwalk[duplicated(code_2010)]
unique(soc_xwalk)
soc_xwalk
sapply(soc_xwalk, stringr::str_sub(), start=5, end=6)
sapply(soc_xwalk, stringr::str_sub, start=5, end=6)
sapply(soc_xwalk, stringr::str_sub, start=6, end=7)
sapply(soc_xwalk, stringr::str_sub, start=1, end=7)
sapply(soc_xwalk, stringr::str_sub, start=7, end=7)
sapply(soc_xwalk, stringr::str_sub, start=7, end=7) %>% unlist()
sapply(soc_xwalk, stringr::str_sub, start=7, end=7) %>% as.vector()
sapply(soc_xwalk, stringr::str_sub, start=7, end=7) %>% as.vector() %>% unique()
codes = "11-0000"
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nz = stringr::str_extract(
string = codes,
pattern = "-?0+$"
) %>%
nchar()
nz
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nz = stringr::str_extract(
string = codes,
pattern = "-?0+$"
) %>%
nchar()
nz[is.na(nz)] = 0
grp = nchar(codes) - nz
grp
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nz = stringr::str_extract(
string = codes,
pattern = "-?0+$"
) %>%
nchar()
nz[is.na(nz)] = 0
nd = nchar(codes) - nz
xwalk = soc_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
# Check format of code: must be 6 digits with a hyphen after 2
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2}-[0-9]{4}$"))){
stop(
"all `codes` must be formatted as DD-DDDD"
)
}
# Check the from/to years: must be >2000, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 2000 | from_year > cy){
stop(
"`from_year` must be between 2000 (release of SOC) and the current year"
)
}
from_year = 2000
to_year = 2018
if(from_year < 2000 | from_year > cy){
stop(
"`from_year` must be between 2000 (release of SOC) and the current year"
)
}
if(to_year < 2000 | from_year > cy){
stop(
"`to_year` must be between 2000 (release of SOC) and the current year"
)
}
# Round off years for conversion. Throw an error if they map to the same year
releases = c(2000, 2010, 2018)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
if(xwalk_cols[1] == xwalk_cols[2]){
stop(
paste0(
from_year, " and ", to_year, "correspond to the same SOC release"
)
)
}
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nz = stringr::str_extract(
string = codes,
pattern = "-?0+$"
) %>%
nchar()
nz[is.na(nz)] = 0
nd = nchar(codes) - nz
xwalk = soc_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
n = nd[1]
n
codes_n = codes[nd == n]
codes_n
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, stringr::str_sub, start=1, end=n)] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
n
codes_n = codes[nd == n]
fill = ifelse(
test = n == 2,
yes = "-0000",
no = paste(rep("0", 7-n), collapse="")
)
fill
codes_n = codes[nd == n]
fill = ifelse(
test = n == 2,
yes = "-0000",
no = paste(rep("0", 7-n), collapse="")
)
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start=1, end=n
) %>%
paste(., fill)
] %>%
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start=1, end=n
) %>%
paste(., fill)
})] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start=1, end=n
) %>%
paste(., fill)
})]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start=1, end=n
) %>%
paste0(., fill)
})]
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start = 1,
end = n
) %>%
paste0(., fill)
})] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nz = stringr::str_extract(
string = codes,
pattern = "-?0+$"
) %>%
nchar()
nz[is.na(nz)] = 0
nd = nchar(codes) - nz
xwalk = soc_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
fill = ifelse(
test = n == 2,
yes = "-0000",
no = paste(rep("0", 7-n), collapse="")
)
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start = 1,
end = n
) %>%
paste0(., fill)
})] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
data.table::rbindlist()
# Warn about any missing codes before returning
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
if(length(missing_codes) > 0){
warning(
paste0(
"The following codes are not present in the NAICS ", xwalk_cols[1],
"release:", paste(missing_codes, collapse=", ")
)
)
}
converted
devtools::document()
#' manifests. This is especially useful when one "code_\{from\}" matches to
#' multiple entries in "code_\{to\}".
#'
#' @export
#'
#' @examples
#' # Convert 3 codes from 2002 to 2022
#' convert_soc(c("11-0000","25-9041"), 2010, 2018)
#' # Because of release schedule, the following is equivalent to the above
#' convert_soc(c("11-0000","25-9041"), 2014, 2024)
convert_soc = function(codes, from_year, to_year){
# Check format of code: must be 6 digits with a hyphen after 2
codes = unique(codes)
if(!all(stringr::str_detect(codes, "^[0-9]{2}-[0-9]{4}$"))){
stop(
"all `codes` must be formatted as DD-DDDD"
)
}
# Check the from/to years: must be >2000, <current year
cy = as.integer(format(Sys.Date(), "%Y"))
if(from_year < 2000 | from_year > cy){
stop(
"`from_year` must be between 2000 (release of SOC) and the current year"
)
}
if(to_year < 2000 | from_year > cy){
stop(
"`to_year` must be between 2000 (release of SOC) and the current year"
)
}
# Round off years for conversion. Throw an error if they map to the same year
releases = c(2000, 2010, 2018)
xwalk_cols = c(
releases[max(which(from_year >= releases))],
releases[max(which(to_year >= releases))]
) %>%
paste0("code_", .)
if(xwalk_cols[1] == xwalk_cols[2]){
stop(
paste0(
from_year, " and ", to_year, "correspond to the same SOC release"
)
)
}
# Convert by looping over codes with the same number of digits. The
# "conversion" is a simple identification of unique rows in the xwalk.
nz = stringr::str_extract(
string = codes,
pattern = "-?0+$"
) %>%
nchar()
nz[is.na(nz)] = 0
nd = nchar(codes) - nz
xwalk = soc_xwalk %>%
data.table::setDT() %>%
.[, xwalk_cols, with=FALSE]
converted = lapply(unique(nd), function(n){
codes_n = codes[nd == n]
fill = ifelse(
test = n == 2,
yes = "-0000",
no = paste(rep("0", 7-n), collapse="")
)
xwalk %>%
data.table::copy() %>%
.[, lapply(.SD, function(x){
stringr::str_sub(
string = x,
start = 1,
end = n
) %>%
paste0(., fill)
})] %>%
.[get(xwalk_cols[1]) %in% codes_n] %>%
.[, .N, by=xwalk_cols]
}) %>%
data.table::rbindlist()
# Warn about any missing codes before returning
missing_codes = codes[!codes %in% converted[[xwalk_cols[1]]]]
if(length(missing_codes) > 0){
warning(
paste0(
"The following codes are not present in the NAICS ", xwalk_cols[1],
"release:", paste(missing_codes, collapse=", ")
)
)
}
return(converted)
}
convert_soc(c("11-0000","25-9041")
convert_soc(c("11-0000","25-9041"), 2014, 2024)
devtools::document()
devtools::check()
